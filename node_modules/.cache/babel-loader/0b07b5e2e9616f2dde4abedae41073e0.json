{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { goTrySync } from 'go-try';\nimport { useCallback, useEffect, useState } from 'react'; // Syncs state to localStorage and vice versa\n\nexport function useSyncedState(key, initialValue) {\n  _s();\n\n  const getValueFromStorage = useCallback(() => {\n    var _goTrySync$data;\n\n    return (_goTrySync$data = goTrySync(() => {\n      var _localStorage$getItem;\n\n      return JSON.parse((_localStorage$getItem = localStorage.getItem(key)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '');\n    }).data) !== null && _goTrySync$data !== void 0 ? _goTrySync$data : initialValue;\n  }, [initialValue, key]);\n  const [state, setState] = useState(() => getValueFromStorage());\n  useEffect(() => {\n    function handleStorageChange() {\n      setState(getValueFromStorage);\n    }\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [getValueFromStorage]);\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}\n\n_s(useSyncedState, \"SpAWBQl9X10nJKIOig3Ty0mdPC8=\");","map":{"version":3,"sources":["/home/amasuo/Front-TODO/src/shared/SharedHooks.ts"],"names":["goTrySync","useCallback","useEffect","useState","useSyncedState","key","initialValue","getValueFromStorage","JSON","parse","localStorage","getItem","data","state","setState","handleStorageChange","window","addEventListener","removeEventListener","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD,C,CAEA;;AACA,OAAO,SAASC,cAAT,CACLC,GADK,EAELC,YAFK,EAGyC;AAAA;;AAC9C,QAAMC,mBAAmB,GAAGN,WAAW,CACrC;AAAA;;AAAA,8BACED,SAAS,CAAC;AAAA;;AAAA,aAAMQ,IAAI,CAACC,KAAL,0BAAWC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAX,yEAAwC,EAAxC,CAAN;AAAA,KAAD,CAAT,CAA6DO,IAD/D,6DAEEN,YAFF;AAAA,GADqC,EAIrC,CAACA,YAAD,EAAeD,GAAf,CAJqC,CAAvC;AAOA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAI,MAAMI,mBAAmB,EAA7B,CAAlC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,aAASa,mBAAT,GAA+B;AAC7BD,MAAAA,QAAQ,CAACP,mBAAD,CAAR;AACD;;AAEDS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCF,mBAAnC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCH,mBAAtC;AACD,KAFD;AAGD,GAVQ,EAUN,CAACR,mBAAD,CAVM,CAAT;AAYAL,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACS,OAAb,CAAqBd,GAArB,EAA0BG,IAAI,CAACY,SAAL,CAAeP,KAAf,CAA1B;AACD,GAFQ,EAEN,CAACR,GAAD,EAAMQ,KAAN,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD;;GA9BeV,c","sourcesContent":["import { goTrySync } from 'go-try';\nimport React, { useCallback, useEffect, useState } from 'react';\n\n// Syncs state to localStorage and vice versa\nexport function useSyncedState<T>(\n  key: string,\n  initialValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const getValueFromStorage = useCallback(\n    () =>\n      goTrySync(() => JSON.parse(localStorage.getItem(key) ?? '')).data ??\n      initialValue,\n    [initialValue, key]\n  );\n\n  const [state, setState] = useState<T>(() => getValueFromStorage());\n\n  useEffect(() => {\n    function handleStorageChange() {\n      setState(getValueFromStorage);\n    }\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [getValueFromStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n"]},"metadata":{},"sourceType":"module"}