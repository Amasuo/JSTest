{"ast":null,"code":"var _jsxFileName = \"/home/amasuo/Front-TODO/src/taskboard/TaskboardItemFormModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { Modal, Form, Input } from 'antd';\nimport RangePicker from '../shared/RangePicker';\nimport { TextField } from '@material-ui/core';\nimport { isDate } from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk\n}) {\n  _s();\n\n  const [form] = Form.useForm();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (visible) {\n      var _inputRef$current;\n\n      // Focus on the first input when the modal is opened\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  const handleSubmit = () => {\n    form.submit();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Add Item\",\n    visible: visible,\n    destroyOnClose: true // To make dynamically changing initialValues work with Form\n    ,\n    forceRender: true,\n    onCancel: onCancel,\n    onOk: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      form: form,\n      layout: \"vertical\",\n      initialValues: initialValues,\n      onFinish: values => {\n        console.log(values);\n        onOk(values);\n        form.resetFields();\n        onCancel();\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"title\",\n        label: \"Title\",\n        rules: [{\n          required: true,\n          message: \"'Title' is required\"\n        }, {\n          max: 100,\n          message: \"'Title' can not be longer than 100 characters\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          ref: inputRef,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"description\",\n        label: \"Description\",\n        rules: [{\n          required: true,\n          message: \"'Description' is required\"\n        }, {\n          max: 400,\n          message: \"'Description' can not be longer than 400 characters\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        id: \"priority\",\n        name: \"priority\",\n        label: \"Priority level\" //rules={[{ required: true, message: \"'Priority' is required\" }]}\n        ,\n        children: /*#__PURE__*/_jsxDEV(RangePicker, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"date\",\n        label: \"Deadline\",\n        rules: [{\n          required: true,\n          message: \"'Date of completion' is required\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"date\",\n          type: \"date\",\n          defaultValue: isDate,\n          InputLabelProps: {\n            shrink: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskboardItemFormModal, \"3PXihbjiuZ8Wn/s0/JQsqNYpQwQ=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = TaskboardItemFormModal;\nexport default TaskboardItemFormModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskboardItemFormModal\");","map":{"version":3,"sources":["/home/amasuo/Front-TODO/src/taskboard/TaskboardItemFormModal.tsx"],"names":["useEffect","useRef","Modal","Form","Input","RangePicker","TextField","isDate","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","form","useForm","inputRef","current","focus","resetFields","handleSubmit","submit","values","console","log","required","message","max","shrink"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { Modal, Form, ModalProps, Input } from 'antd';\nimport { TaskboardItem } from './TaskboardTypes';\nimport RangePicker from '../shared/RangePicker';\nimport { TextField } from '@material-ui/core';\nimport { isDate } from 'moment';\nexport type TaskboardItemFormValues = Pick<\n  TaskboardItem,\n  'title' | 'description'\n>;\n\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\n  initialValues: TaskboardItemFormValues;\n  onCancel: VoidFunction;\n  onOk: (values: TaskboardItemFormValues) => void;\n};\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk,\n}: TaskboardItemFormModalProps) {\n  const [form] = Form.useForm<TaskboardItemFormValues>();\n\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (visible) {\n      // Focus on the first input when the modal is opened\n      inputRef.current?.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  const handleSubmit = () => {\n    form.submit();\n  }\n\n  return (\n    <Modal\n      title=\"Add Item\"\n      visible={visible}\n      destroyOnClose\n      // To make dynamically changing initialValues work with Form\n      forceRender\n      onCancel={onCancel}\n      onOk={handleSubmit}\n    >\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        onFinish={(values) => {\n          console.log(values);\n          onOk(values);\n          form.resetFields();\n          onCancel();\n        }}\n      >\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            { required: true, message: \"'Title' is required\" },\n            {\n              max: 100,\n              message: \"'Title' can not be longer than 100 characters\",\n            },\n          ]}\n        >\n          <Input ref={inputRef} autoFocus />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            { required: true, message: \"'Description' is required\" },\n            {\n              max: 400,\n              message: \"'Description' can not be longer than 400 characters\",\n            },\n          ]}\n        >\n          <Input.TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n          id = \"priority\"\n          name=\"priority\"\n          label=\"Priority level\"\n          //rules={[{ required: true, message: \"'Priority' is required\" }]}\n        >\n          <RangePicker />\n        </Form.Item>\n        <Form.Item\n          name=\"date\"\n          label=\"Deadline\"\n          rules={[\n            { required: true, message: \"'Date of completion' is required\" },\n          ]}\n        >\n          <TextField\n            id=\"date\"\n            type=\"date\"\n            defaultValue={isDate}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default TaskboardItemFormModal;\n"]},"metadata":{},"sourceType":"module"}