{"ast":null,"code":"var _jsxFileName = \"/home/amasuo/Front-TODO/src/taskboard/TaskboardCol.tsx\";\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { Button, Card } from 'antd';\nimport TaskboardItemCard from './TaskboardItemCard';\nimport { colors } from '../shared/SharedUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n`;\n_c = TaskboardColRoot;\nconst DroppableRoot = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  background-color: ${({\n  isDraggingOver\n}) => isDraggingOver ? colors.primary[2] : colors.primary[1]};\n`;\n_c2 = DroppableRoot;\n\nfunction TaskboardCol({\n  items,\n  status,\n  onClickAdd,\n  onEdit,\n  onDelete\n}) {\n  return /*#__PURE__*/_jsxDEV(TaskboardColRoot, {\n    title: `${status} (${items.length})`,\n    extra: onClickAdd && /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: onClickAdd,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: status,\n      children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(DroppableRoot, {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        isDraggingOver: snapshot.isDraggingOver,\n        children: [items.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: /*#__PURE__*/_jsxDEV(TaskboardItemCard, {\n                item: item,\n                status: status,\n                isDragging: snapshot.isDragging,\n                onEdit: onEdit,\n                onDelete: onDelete\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = TaskboardCol;\nexport default TaskboardCol;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TaskboardColRoot\");\n$RefreshReg$(_c2, \"DroppableRoot\");\n$RefreshReg$(_c3, \"TaskboardCol\");","map":{"version":3,"sources":["/home/amasuo/Front-TODO/src/taskboard/TaskboardCol.tsx"],"names":["Droppable","Draggable","styled","Button","Card","TaskboardItemCard","colors","TaskboardColRoot","DroppableRoot","div","isDraggingOver","primary","TaskboardCol","items","status","onClickAdd","onEdit","onDelete","length","provided","snapshot","innerRef","droppableProps","map","item","index","id","draggableProps","dragHandleProps","isDragging","placeholder"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,qBAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AAEA,OAAOC,iBAAP,MAA0D,qBAA1D;AACA,SAASC,MAAT,QAAuB,uBAAvB;;AAEA,MAAMC,gBAAgB,GAAGL,MAAM,CAACE,IAAD,CAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;KAAMG,gB;AAoBN,MAAMC,aAAa,GAAGN,MAAM,CAACO,GAAwB;AACrD;AACA;AACA,sBAAsB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAClBA,cAAc,GAAGJ,MAAM,CAACK,OAAP,CAAe,CAAf,CAAH,GAAuBL,MAAM,CAACK,OAAP,CAAe,CAAf,CAAkB;AAC3D,CALA;MAAMH,a;;AAgBN,SAASI,YAAT,CAAsB;AACpBC,EAAAA,KADoB;AAEpBC,EAAAA,MAFoB;AAGpBC,EAAAA,UAHoB;AAIpBC,EAAAA,MAJoB;AAKpBC,EAAAA;AALoB,CAAtB,EAMsB;AACpB,sBACE,QAAC,gBAAD;AACE,IAAA,KAAK,EAAG,GAAEH,MAAO,KAAID,KAAK,CAACK,MAAO,GADpC;AAEE,IAAA,KAAK,EACHH,UAAU,iBACR,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAEA,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJN;AAAA,2BAUE,QAAC,SAAD;AAAW,MAAA,WAAW,EAAED,MAAxB;AAAA,gBACG,CAACK,QAAD,EAAWC,QAAX,kBACC,QAAC,aAAD;AACE,QAAA,GAAG,EAAED,QAAQ,CAACE,QADhB;AAAA,WAEMF,QAAQ,CAACG,cAFf;AAGE,QAAA,cAAc,EAAEF,QAAQ,CAACV,cAH3B;AAAA,mBAKGG,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,8BACE,QAAC,SAAD;AAAyB,YAAA,WAAW,EAAED,IAAI,CAACE,EAA3C;AAA+C,YAAA,KAAK,EAAED,KAAtD;AAAA,sBACG,CAACN,QAAD,EAAWC,QAAX,kBACC;AAEE,cAAA,GAAG,EAAED,QAAQ,CAACE,QAFhB;AAAA,iBAGMF,QAAQ,CAACQ,cAHf;AAAA,iBAIMR,QAAQ,CAACS,eAJf;AAAA,qCAME,QAAC,iBAAD;AACE,gBAAA,IAAI,EAAEJ,IADR;AAEE,gBAAA,MAAM,EAAEV,MAFV;AAGE,gBAAA,UAAU,EAAEM,QAAQ,CAACS,UAHvB;AAIE,gBAAA,MAAM,EAAEb,MAJV;AAKE,gBAAA,QAAQ,EAAEC;AALZ;AAAA;AAAA;AAAA;AAAA;AANF,eACOO,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA;AAFJ,aAAgBF,IAAI,CAACE,EAArB;AAAA;AAAA;AAAA;AAAA,kBADF;AAoBD,SArBA,CALH,EA2BGP,QAAQ,CAACW,WA3BZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;MArDQlB,Y;AAuDT,eAAeA,YAAf","sourcesContent":["import { Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { Button, Card } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemCard, { TaskboardItemCardProps } from './TaskboardItemCard';\nimport { colors } from '../shared/SharedUtils';\n\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n`;\n\ninterface DroppableRootProps {\n  isDraggingOver: boolean;\n}\n\nconst DroppableRoot = styled.div<DroppableRootProps>`\n  height: 100%;\n  overflow-y: auto;\n  background-color: ${({ isDraggingOver }) =>\n    isDraggingOver ? colors.primary[2] : colors.primary[1]};\n`;\n\nexport type TaskboardColProps = Pick<\n  TaskboardItemCardProps,\n  'onEdit' | 'onDelete'\n> & {\n  items: TaskboardItem[];\n  status: TaskboardItemStatus;\n  onClickAdd?: VoidFunction;\n};\n\nfunction TaskboardCol({\n  items,\n  status,\n  onClickAdd,\n  onEdit,\n  onDelete,\n}: TaskboardColProps) {\n  return (\n    <TaskboardColRoot\n      title={`${status} (${items.length})`}\n      extra={\n        onClickAdd && (\n          <Button type=\"primary\" onClick={onClickAdd}>\n            Add\n          </Button>\n        )\n      }\n    >\n      <Droppable droppableId={status}>\n        {(provided, snapshot) => (\n          <DroppableRoot\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {items.map((item, index) => {\n              return (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      key={item.id}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <TaskboardItemCard\n                        item={item}\n                        status={status}\n                        isDragging={snapshot.isDragging}\n                        onEdit={onEdit}\n                        onDelete={onDelete}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              );\n            })}\n            {provided.placeholder}\n          </DroppableRoot>\n        )}\n      </Droppable>\n    </TaskboardColRoot>\n  );\n}\n\nexport default TaskboardCol;\n"]},"metadata":{},"sourceType":"module"}